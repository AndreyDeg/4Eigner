local Points = {
	{-0.1, 0.25, 0};
	{-0.1, 0.225242216975605, 0.10847093477939};
	{-0.1, 0.155872450464683, 0.195457870617007};
	{-0.1, 0.0556302334890786, 0.243731978045456};
	{-0.1, -0.0556302334890786, 0.243731978045456};
	{-0.1, -0.155872450464683, 0.195457870617007};
	{-0.1, -0.225242216975605, 0.10847093477939};
	{-0.1, -0.25, 0};
	{-0.1, -0.225242216975605, -0.10847093477939};
	{-0.1, -0.155872450464683, -0.195457870617007};
	{-0.1, -0.0556302334890786, -0.243731978045456};
	{-0.1, 0.0556302334890786, -0.243731978045456};
	{-0.1, 0.155872450464683, -0.195457870617007};
	{-0.1, 0.225242216975605, -0.10847093477939};
	{-0.09, 0.35, 0};
	{-0.09, 0.315339103765847, 0.151859308691145};
	{-0.09, 0.218221430650557, 0.27364101886381};
	{-0.09, 0.07788232688471, 0.341224769263638};
	{-0.09, -0.07788232688471, 0.341224769263638};
	{-0.09, -0.218221430650557, 0.27364101886381};
	{-0.09, -0.315339103765847, 0.151859308691145};
	{-0.09, -0.35, 0};
	{-0.09, -0.315339103765847, -0.151859308691145};
	{-0.09, -0.218221430650557, -0.27364101886381};
	{-0.09, -0.07788232688471, -0.341224769263638};
	{-0.09, 0.07788232688471, -0.341224769263638};
	{-0.09, 0.218221430650557, -0.27364101886381};
	{-0.09, 0.315339103765847, -0.151859308691145};
	{0.09, 0.35, 0};
	{0.09, 0.315339103765847, 0.151859308691145};
	{0.09, 0.218221430650557, 0.27364101886381};
	{0.09, 0.07788232688471, 0.341224769263638};
	{0.09, -0.07788232688471, 0.341224769263638};
	{0.09, -0.218221430650557, 0.27364101886381};
	{0.09, -0.315339103765847, 0.151859308691145};
	{0.09, -0.35, 0};
	{0.09, -0.315339103765847, -0.151859308691145};
	{0.09, -0.218221430650557, -0.27364101886381};
	{0.09, -0.07788232688471, -0.341224769263638};
	{0.09, 0.07788232688471, -0.341224769263638};
	{0.09, 0.218221430650557, -0.27364101886381};
	{0.09, 0.315339103765847, -0.151859308691145};
	{-0.1, 0.06, 0};
	{-0.1, 0.037409388111524, 0.0469098889480818};
	{-0.1, -0.0133512560373789, 0.0584956747309094};
	{-0.1, -0.0540581320741451, 0.0260330243470535};
	{-0.1, -0.0540581320741451, -0.0260330243470535};
	{-0.1, -0.0133512560373789, -0.0584956747309094};
	{-0.1, 0.037409388111524, -0.0469098889480818};
};

local Verges = {
	{0, 14, 15, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{0, 15, 1, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{14, 28, 29, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{14, 29, 15, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{1, 15, 16, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{1, 16, 2, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{15, 29, 30, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{15, 30, 16, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{2, 16, 17, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{2, 17, 3, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{16, 30, 31, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{16, 31, 17, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{3, 17, 18, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{3, 18, 4, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{17, 31, 32, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{17, 32, 18, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{4, 18, 19, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{4, 19, 5, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{18, 32, 33, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{18, 33, 19, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{5, 19, 20, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{5, 20, 6, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{19, 33, 34, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{19, 34, 20, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{6, 20, 21, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{6, 21, 7, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{20, 34, 35, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{20, 35, 21, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{7, 21, 22, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{7, 22, 8, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{21, 35, 36, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{21, 36, 22, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{8, 22, 23, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{8, 23, 9, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{22, 36, 37, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{22, 37, 23, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{9, 23, 24, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{9, 24, 10, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{23, 37, 38, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{23, 38, 24, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{10, 24, 25, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{10, 25, 11, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{24, 38, 39, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{24, 39, 25, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{11, 25, 26, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{11, 26, 12, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{25, 39, 40, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{25, 40, 26, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{12, 26, 27, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{12, 27, 13, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{26, 40, 41, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{26, 41, 27, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{13, 27, 14, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{13, 14, 0, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{27, 41, 28, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{27, 28, 14, {1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3},{1, 0.3, 0.3, 0.3}};
	{0, 1, 48, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{1, 42, 48, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{2, 3, 42, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{3, 43, 42, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{4, 5, 43, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{5, 44, 43, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{6, 7, 44, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{7, 45, 44, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{8, 9, 45, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{9, 46, 45, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{10, 11, 46, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{11, 47, 46, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{12, 13, 47, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{13, 48, 47, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{42, 43, 44, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{42, 44, 45, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{42, 45, 46, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{42, 46, 47, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
	{42, 47, 48, {1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7},{1, 0.7, 0.7, 0.7}};
};

function CreateWheel(map, x, y, z, m, r, mirrow)

	local CheckC = function(color)
		if color then
			return Color(color[1]*255,color[2]*255,color[3]*255,color[4]*255);
		else
			return RandColor;
		end;
	end;

	local points = setmetatable({}, {__index = table});
	for k, v in ipairs(Points) do
		points:insert(Vector(mirrow * v[1] * r, v[2] * r, v[3] * r));
	end;

	local indices = setmetatable({}, {__index = table});
	local vertex = setmetatable({}, {__index = table});
	for k, v in ipairs(Verges) do

		if mirrow > 0 then
			vertex:insert(Vertex(mirrow*Points[v[1]+1][1],Points[v[1]+1][3],Points[v[1]+1][2],CheckC(v[4]),0,0));
			vertex:insert(Vertex(mirrow*Points[v[3]+1][1],Points[v[3]+1][3],Points[v[3]+1][2],CheckC(v[6]),0,0));
			vertex:insert(Vertex(mirrow*Points[v[2]+1][1],Points[v[2]+1][3],Points[v[2]+1][2],CheckC(v[5]),0,0));
		else
			vertex:insert(Vertex(mirrow*Points[v[1]+1][1],Points[v[1]+1][3],Points[v[1]+1][2],CheckC(v[4]),0,0));
			vertex:insert(Vertex(mirrow*Points[v[2]+1][1],Points[v[2]+1][3],Points[v[2]+1][2],CheckC(v[5]),0,0));
			vertex:insert(Vertex(mirrow*Points[v[3]+1][1],Points[v[3]+1][3],Points[v[3]+1][2],CheckC(v[6]),0,0));
		end;
	end;

	local result = Object3D();
	--result.Actor = Physic:CreateSphere(x, y, z, r, m);
	result.Actor = Physic:CreateConvexMesh(ToListVector(points),ToListInt(indices), x, y, z, m);
	result.Model = Render:NewModel3D();
	result.Model:SetVertices(ToListVertex(vertex));

	map:AddObject(result);
	return result;
end;